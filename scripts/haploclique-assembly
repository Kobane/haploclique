#! /usr/bin/env bash
usage()
{
cat << EOF

USAGE:     haploclique-assembly options...

OPTIONS:
   -h      Show this message
   -H      Show extended help
   -r      Path to the reference genome (required)
   -i      Path to the alignment in BAM format (required)

UPDATE:    http://bit.ly/haploclique
EOF
}

usageextended()
{
cat << EOF

USAGE:     haploclique-assembly options...

OPTIONS:
   -H      Show this message
   -r      Path to the reference genome (required)
   -i      Path to the alignment in BAM format (required)
   -q      Edge threshold for error-corrected reads
   -g      Edge threshold for raw reads
   -o      Minimal relative overlap for error-corrected reads
   -j      Minimal relative overlap for raw reads
   -c      Maximal coverage
   -s      Minimal clique size
   -p      PacBio alignment with InDelFixer
   -a      InDelFixer alignment
   -t      Number of iterations
   -u      Shuffle in parallelization
   -e      Continue assembly
   -z      Split size
   -x      Split size for singletons
   -G      No parallelization
   -w      Do not re-use singletons
   -n      Do not use alignment prior
   -l      Only predict indels, no haplotypes
   -m      Maximal time for max-clique enumeration
   -P      Ignore single indels
   -L      Laser alignment
   -b      BLASR alignment

UPDATE:    http://bit.ly/haploclique
EOF
}

REF=
ALIGNMENT=
HQ=1
HG=0.95
HK=0.97
HO=0.9
HJ=0.9
HC=1000
HS=5
PACBIO=0
INDELFIXER=0
ITERATIONS=1
SHUFFLE=0
CONTINUE=0
SPLITSIZE=200
SPLITSIZESINGLES=200
NOPARALLEL=0
NOSINGLETONS=0
NOSKIPPING=0
NOPRIOR=0
INDEL=0
TIME=10000
INDELS=""
LASER=0
BLASR=0
while getopts “ah:r:q:o:pt:c:s:euz:Gwng:j:i:lx:m:PLbHk:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         H)
             usageextended
             exit 1
             ;;
         i)
             ALIGNMENT=$OPTARG
             ;;
         r)
             REF=$OPTARG
             ;;
         q)
             HQ=$OPTARG
             ;;
         k)
             HK=$OPTARG
             ;;
         g)
             HG=$OPTARG
             ;;
         j)
             HJ=$OPTARG
             ;;
         o)
             HO=$OPTARG
             ;;
         c)
             HC=$OPTARG
             ;;
         s)
             HS=$OPTARG
             ;;
         p)
             PACBIO=1
             INDELFIXER=1
             ;;
         a)
             INDELFIXER=1
             ;;
         t)
             ITERATIONS=$OPTARG
             ;;
         u)
             SHUFFLE=1
             ;;
         e)
             CONTINUE=1
             ;;
         z)
             SPLITSIZE=$OPTARG
             ;;
         x)
             SPLITSIZESINGLES=$OPTARG
             ;;
         G)
             NOPARALLEL=1
             ;;
         w)
             NOSINGLETONS=1
             ;;
         n)
             NOPRIOR=1
             ;;
         l)
             INDEL=1
             NOSINGLETONS=1
             ;;
         m)
             TIME=$OPTARG
             ;;
         P)
             INDELS="-m"
             ;;
         L)
             LASER=1
             ;;
         b)
             BLASR=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

hash haploclique >/dev/null 2>&1 || { echo >&2 "I require haploclique but it's not installed.  Aborting."; exit 1; }
hash haploclique-assembly >/dev/null 2>&1 || { echo >&2 "I require haploclique-assembly but it's not installed.  Aborting."; exit 1; }
hash samtools >/dev/null 2>&1 || { echo >&2 "I require samtools but it's not installed.  Aborting."; exit 1; }
hash bam-to-alignment-priors >/dev/null 2>&1 || { echo >&2 "I require bam-to-alignment-priors but it's not installed.  Aborting."; exit 1; }
hash java >/dev/null 2>&1 || { echo >&2 "I require java but it's not installed.  Aborting."; exit 1; }
hash seeksingletons >/dev/null 2>&1 || { echo >&2 "I require seeksingletons but it's not installed.  Aborting."; exit 1; }
hash postprocess-predictions >/dev/null 2>&1 || { echo >&2 "I require postprocess-predictions but it's not installed.  Aborting."; exit 1; }
hash alignmentparser >/dev/null 2>&1 || { echo >&2 "I require alignmentparser but it's not installed.  Aborting."; exit 1; }

if [[ -z $REF ]] || [[ -z $ALIGNMENT ]]
then
     usage
     exit 1
fi

echo $HQ > .HQ.parameter
echo $HO > .HO.parameter
echo $HC > .HC.parameter
echo $HS > .HS.parameter
echo $HG > .HG.parameter
echo $HJ > .HJ.parameter
echo $HK > .HK.parameter
if [[ $REF == ~/* ]] || [[ $REF == /* ]]; then
    echo $REF > .REF.parameter
else
    echo ../$REF > .REF.parameter
fi
echo $PACBIO > .PACBIO.parameter
echo $INDELFIXER > .INDELFIXER.parameter
echo $NOPRIOR > .NOPRIOR.parameter
echo $INDEL > .INDEL.parameter
echo $TIME > .TIME.parameter
echo $INDELS > .INDELS.parameter

function initial() {
    samtools view -uf 1 $ALIGNMENT > paired.bam 2> /dev/null
    samtools view -uF 1 $ALIGNMENT > single.bam 2> /dev/null
    java -jar $SAF/ConsensusFixer.jar -i $ALIGNMENT --stats 2>&1 > /dev/null
    samtools sort -n single.bam single_sort 2> /dev/null > /dev/null
    samtools view single_sort.bam  | head > single_sort.sam 2> /dev/null
    samtools view paired.bam  | head > paired.sam 2> /dev/null
    touch paired.priors single.priors
    if [ -s paired.sam ]; then
        bam-to-alignment-priors --ignore_xa -m mean-sd $REF paired.bam > paired.priors 2> /dev/null
    fi
    if [ -s single_sort.sam ]; then
        bam-to-alignment-priors --ignore_xa --unsorted --single-end $REF single_sort.bam > single.priors 2> /dev/null
    fi

    mv paired.priors alignment.prior 2> /dev/null
    if [ $INDEL == 0 ]; then
        cat single.priors >> alignment.prior 2> /dev/null
    fi
    rm *sam paired.bam single_sort.bam single.bam *.priors 2>&1 > /dev/null
}

function assemble() {
    FORWARD=data_cliques_paired_R1.fastq
    BACKWARD=data_cliques_paired_R2.fastq
    SINGLE=data_cliques_single.fastq
    if [[ -z /proc/cpuinfo ]]; then
        CORES=`cat /proc/cpuinfo | grep processor | wc -l`
    else
        CORES=4
    fi
    SVIEW="-@ $CORES"
    SSORT="-@ $CORES -m 4G"
    function idf ()
    {
        java -Xmx4g -XX:+UseParallelGC -XX:NewRatio=9 -jar $SAF/InDelFixer.jar $* 2>&1 > /dev/null
    }
    function alignMemPaired () {
        if [[ -z /proc/cpuinfo ]]; then
            CORES=`cat /proc/cpuinfo | grep processor | wc -l`
        else
            CORES=4
        fi
        if [ $INDELFIXER == 1 ]; then
            if [ $PACBIO == 1 ]; then
                idf -i $1 -ir $3 -g $2 -pacbio 
            else
                idf -i $1 -ir $3 -g $2
            fi
            mv reads.sam aln.sam
        else
            bwa index $2 2> /dev/null > /dev/null
            bwa mem -t 8 $2 $1 $3 > aln.sam 2> /dev/null
        fi
        samtools faidx $2 2>&1 > /dev/null
        samtools view $SVIEW -q 1 -F 4 -bt $REF.fai aln.sam > aln.bam 2> /dev/null
        samtools sort $SSORT aln.bam reads 2>&1 > /dev/null
        rm aln* 2>&1 > /dev/null
        samtools view -uf 1 reads.bam > paired.bam 2> /dev/null
        samtools view -uF 1 reads.bam > single_1.bam 2> /dev/null
        rm reads.bam
    }
    function alignMemSingle () {
        if [[ -z /proc/cpuinfo ]]; then
            CORES=`cat /proc/cpuinfo | grep processor | wc -l`
        else
            CORES=4
        fi
        if [ $INDELFIXER == 1 ]; then
            if [ $PACBIO == 1 ]; then
                idf -i $1 -g $2 -pacbio 
            else
                idf -i $1 -g $2
            fi
            mv reads.sam aln.sam
        elif [ $LASER == 1 ]; then
            split-reads --single-end $1 > x.split.fastq
            bwa aln $2 x.split.fastq > x.sai
            bwa samse -n25 $2 x.sai x.split.fastq | xa2multi.pl | samtools view -Sb - > x.bwa.bam
            cat x.bwa.bam | laser-core -X -I -T 20 --m_in_cigar --indel_cost 35 --affine_gapcosts --split_cost 70 --soft_clip --soft_clip_open_cost 200 --soft_clip_extend_cost 5 --cost_threshold 3000 --max_span 10000 --anchor_distance 10000 --single-end $2 $1 > x.laser.bam
            samtools view -h x.laser.bam > aln.sam
        elif [ $BLASR == 1 ]; then
            blasr $1 $2 -sam -out aln.sam -nproc $CORES
        else
            bwa index $2 2> /dev/null > /dev/null
            bwa mem -t 8 $2 $1 > aln.sam 2> /dev/null
        fi
        samtools faidx $2 2>&1 > /dev/null
        samtools view $SVIEW -q 1 -F 4 -bt $REF.fai aln.sam > aln.bam 2> /dev/null
        samtools sort $SSORT aln.bam single_2 2>&1 > /dev/null
        rm aln* 2>&1 > /dev/null
    }
    if [[ -s $FORWARD ]] && [[ -s $BACKWARD ]]; then
        alignMemPaired $FORWARD $REF $BACKWARD
    fi

    if [ -s $SINGLE ]; then
        alignMemSingle $SINGLE $REF
        if [ -s single_1.bam ]; then
            samtools merge single.bam single_1.bam single_2.bam 2>&1 > /dev/null
        else
            mv single_2.bam single.bam
        fi
    else
        if [ -s single_1.bam ]; then
            mv single_1.bam single.bam
        fi
    fi

    if [[ -s single.bam ]] && [[  -s paired.bam ]]; then
        samtools merge reads_unsorted.bam single.bam paired.bam 2>&1 > /dev/null
        samtools sort $SSORT reads_unsorted.bam assembly 2>&1 > /dev/null
        samtools index assembly.bam 2>&1 > /dev/null

        java -jar $SAF/ConsensusFixer.jar -i assembly.bam --stats 2>&1 > /dev/null
    elif [[ -s single.bam ]]; then
        samtools sort $SSORT single.bam assembly 2>&1 > /dev/null
        samtools index assembly.bam 2>&1 > /dev/null

        java -jar $SAF/ConsensusFixer.jar -i assembly.bam --stats 2>&1 > /dev/null
    elif [[ -s paired.bam ]]; then
        samtools sort $SSORT paired.bam assembly 2>&1 > /dev/null
        samtools index assembly.bam 2>&1 > /dev/null

        java -jar $SAF/ConsensusFixer.jar -i assembly.bam --stats 2>&1 > /dev/null
    fi

     rm -rf assembly*

    if [[ -s single.bam ]]; then
        samtools sort $SSORT -n single.bam single_sort 2>&1 > /dev/null
        samtools view single_sort.bam > single_sort.sam 2> /dev/null
    fi
    if [[  -s paired.bam ]]; then
        samtools view paired.bam > paired.sam 2> /dev/null
    fi

    touch paired.priors single.priors
    if [ -s paired.sam ]; then
        bam-to-alignment-priors --ignore_xa $REF paired.bam > paired.priors 2> /dev/null
    fi
    if [ -s single_sort.sam ]; then
        bam-to-alignment-priors --ignore_xa --unsorted --single-end $REF single_sort.bam > single.priors 2> /dev/null
    fi

    mv paired.priors alignment.prior
    cat single.priors >> alignment.prior
    rm -rf *sam *bam *.priors 2> /dev/null
}

function computeParallelSingle() {
    cd $1
    HQ=`cat ../.HQ.parameter`
    HO=`cat ../.HO.parameter`
    HG=`cat ../.HG.parameter`
    HJ=`cat ../.HJ.parameter`
    HC=`cat ../.HC.parameter`
    HS=`cat ../.HS.parameter`
    HK=`cat ../.HK.parameter`
    NOPRIOR=`cat ../.NOPRIOR.parameter`
    INDEL=`cat ../.INDEL.parameter`
    TIME=`cat ../.TIME.parameter`
    INDELS=`cat ../.INDELS.parameter`
    #echo -e "Parameter q o c s:\t\t${HQ} ${HO} ${HC} ${HS}"

    ln -s ../data_clique_to_reads.tsv data_clique_to_reads.tsv
    if [ $INDEL == 1 ]; then PI="-M ../mean-sd -I indel.out"; fi
    if [[ $NOPRIOR == 0 ]];then PA="-A ../statistics.txt"; fi
    cat alignment.prior | sort -k6,6 -g | haploclique -k $HK -L 100 $PA $PI -c $HC -s $HS -q $HQ -o $HO -j $HJ -g $HG -t $TIME -a $INDELS -S $1;
    seeksingletons
}

function compute() {
    HQ=`cat .HQ.parameter`
    HO=`cat .HO.parameter`
    HC=`cat .HC.parameter`
    HS=`cat .HS.parameter`
    HG=`cat .HG.parameter`
    HJ=`cat .HJ.parameter`
    HK=`cat .HK.parameter`
    TIME=`cat .TIME.parameter`
    INDELS=`cat .INDELS.parameter`
    #echo -e "Parameter q/o:\t\t${HQ}/${HO}"
    if [ $INDEL == 1 ]; then PI="-M mean-sd -I indel.out"; fi
    if [[ $NOPRIOR == 0 ]];then PA="-A statistics.txt"; fi
    cat alignment.prior | sort -k6,6 -g | haploclique -k $HK -L 100 $PA $PI -c $HC -s $HS -q $HQ -o $HO -j $HJ -g $HG -t $TIME $INDELS -a;
    seeksingletons
}

export -f computeParallelSingle

if [[ ! -s alignment.prior ]]; then
    initial
fi

function copyX() {
    cat x*/data_cliques_paired_R1.fastq >> data_cliques_paired_R1.fastq
    cat x*/data_cliques_paired_R2.fastq >> data_cliques_paired_R2.fastq
    cat x*/data_cliques_single.fastq >> data_cliques_single.fastq
    cat x*/data_clique_to_reads.tsv >> data_clique_to_reads.tsv
}

if [[ $NOPARALLEL == 0 ]]; then
    for i in $(seq 1 ${ITERATIONS}); do
        if [[ $NOSINGLETONS == 0 ]]; then
            cat singles.prior >> alignment.prior 2> /dev/null
        fi
        rm -rf singles.prior data*.fastq trash* *-e x* 2> /dev/null
        if [[ $SHUFFLE == 1 ]]; then
            cat alignment.prior | awk 'BEGIN{srand();}{print rand()"\t"$0}' | sort -k1 -n | cut -f2- | split -l $SPLITSIZE -a 10
            for i in x*; do mkdir $i-dir; mv $i $i-dir/alignment.prior; rm $i; done
        else
            sort -k6,6 -g alignment.prior | split -a 10 -l $SPLITSIZE
            for i in x*; do mkdir $i-dir; mv $i $i-dir/alignment.prior;done
        fi

        parallel computeParallelSingle {} ::: x*-dir
        rm -rf data*
        if [[ $NOSINGLETONS == 0 ]]; then
            echo "Error correction of singletons"
            copyX;
            
            cat data_cliques_* | awk 'BEGIN {l = 0} {if (NR%4==2 && l < length($0)) l = length($0)} END {printf("Max read length:\t\t%.0f bp\n",l)}'
            cat x*/singles.prior | sort -k6,6 -g > alignment.prior 2> /dev/null
            rm -rf trash* *-e x* 2> /dev/null
            if [[ $SHUFFLE == 1 ]]; then
                cat alignment.prior | awk 'BEGIN{srand();}{print rand()"\t"$0}' | sort -k1 -n | cut -f2- | split -l $SPLITSIZESINGLES -a 10
                for i in x*; do mkdir $i-dir; cat $i | sort -u -t" " -k1,1  | sort -k6,6 -g  > $i-dir/alignment.prior; rm $i; done
            else
                split -a 11 -l $SPLITSIZESINGLES alignment.prior
                for i in x*; do mkdir $i-dir; mv $i $i-dir/alignment.prior;done
            fi
            parallel computeParallelSingle {} ::: x*-dir
        fi

        if [[ $INDEL == 1 ]];then
            cat x*/indel.out >> indel.out
            postprocess-predictions --stddev `cat mean-sd | cut -f2 -d" "` indel.out `cat mean-sd | cut -f1 -d" "` --vcf > indel.vcf
            rm -rf x* alignment.prior mean-sd support
            exit 1
        else
            copyX;
            cat x*/singles.prior > singles.prior
            cat data_cliques_* | awk 'BEGIN {l = 0} {if (NR%4==2 && l < length($0)) l = length($0)} END {printf("Max read length:\t\t%.0f bp\n",l)}'
            assemble
            #alignmentparser
        fi
        rm -rf x*
        echo "===="
    done
else
    for i in $(seq 1 ${ITERATIONS}); do
        if [[ $NOSINGLETONS == 0 ]]; then
            sort -u -t" " -k1,1 singles.prior >> alignment.prior 2> /dev/null
            rm -rf singles.prior 2> /dev/null
        fi
        rm -rf data*.fastq trash* *-e x* 2> /dev/null
        compute
        if [[ $INDEL == 1 ]];then
            cat x*/indel.out >> indel.out
            postprocess-predictions --stddev `cat mean-sd | cut -f2 -d" "` indel.out `cat mean-sd | cut -f1 -d" "` --vcf > indel.vcf
            rm -rf x* alignment.prior mean-sd support
            exit 12
        fi
        assemble
        #alignmentparser
        cat data_cliques_* | awk 'BEGIN {l = 0} {if (NR%4==2 && l < length($0)) l = length($0)} END {printf("Max read length:\t\t%.0f bp\n",l)}'
    done
fi

alignmentparser | sort -r -n -k 2 | sed 's/x /_/g;' | tr ' ' '\n\r' > quasispecies.fasta
